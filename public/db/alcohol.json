{
    "alcohol": [
        {
            "title": "React",
            "detail": "컴포넌트를 사용해 재사용 가능한 UI를 만들고 독립적으로 개발했습니다. JSX 문법을 통해 편리하게 작업했으며, 리액트 훅을 사용해 상태 관리, DOM 업데이트, DOM 요소 접근 등을 구현했습니다. 방대한 커뮤니티를 통해 자료를 쉽게 찾을 수 있었습니다."
        },
        {
            "title": "JavaScript",
            "detail": "웹 개발의 핵심 언어로, 동적인 웹 페이지를 만들었습니다. ES6+ 문법을 사용해 가독성 높은 코드를 작성하고 다양한 라이브러리와 프레임워크를 활용하여 효율적으로 개발했습니다."
        },
        {
            "title": "React-Router-Dom",
            "detail": "SPA 프로젝트에서 routing을 구현하는 데 사용했습니다. 깜빡임 없이 페이지 이동을 구현했고, 동적 경로 매칭과 중첩된 라우트를 통해 복잡한 애플리케이션을 유연하게 관리했습니다."
        },
        {
            "title": "Context API",
            "detail": "전역 상태를 효율적으로 관리했습니다. 사용자 인증 상태, 저장된 아이템 등의 상태를 관리하여 컴포넌트 간의 상태 전달을 더욱 편리하게 했습니다."
        },
        {
            "title": "React-icons",
            "detail": "React 프로젝트에서 다양한 아이콘을 손쉽게 사용했습니다. 아이콘 세트를 통합하여 일관된 디자인을 유지했습니다."
        },
        {
            "title": "Email JS",
            "detail": "서버 없이 클라이언트 사이드에서 이메일을 전송하는 기능을 구현했습니다. 백엔드 설정 없이도 빠르게 이메일 기능을 추가할 수 있었습니다."
        },
        {
            "title": "styled-components",
            "detail": "CSS-in-JS 라이브러리로, JavaScript 파일 내에서 스타일을 정의할 수 있게 해줍니다. 이를 통해 컴포넌트 단위로 스타일을 모듈화하고, 재사용성을 높이며, CSS 클래스의 충돌을 방지할 수 있습니다. 프로젝트에서는 `styled-components`를 사용하여 동적 스타일링을 구현하고, 컴포넌트의 스타일을 관리하며 유지 보수성을 개선했습니다."
        },        
        {
            "title": "Firebase",
            "detail": "Google의 백엔드 서비스를 사용해 로그인 및 회원가입, 데이터베이스 기능을 구현했습니다. 서버 설정 없이도 빠르게 백엔드를 구축하고 운영할 수 있었습니다."
        },
        {
            "title": "Vercel",
            "detail": "Next.js를 만든 배포 플랫폼으로 빌드, 배포, 호스팅 서비스를 무료로 제공합니다. GitHub와 연동되어 쉽게 배포를 할 수 있습니다."
        }
    ]
}
